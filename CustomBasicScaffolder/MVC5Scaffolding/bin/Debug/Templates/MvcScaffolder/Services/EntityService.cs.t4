<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ModelNamespace" #>
<#@ parameter type="System.String" name="FolderNamespace" #>
<#@ parameter type="System.String" name="ModelName" #>
<#@ parameter type="System.String" name="PluralizedModelName" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata>" name="OneToManyModelMetadata" #>
<#@ parameter type="System.String" name ="SelectLambdaText" #>
// <copyright file="<#= ModelName #>Service.cs" company="neozhu/SmartCode-Scaffolder">
// Copyright (c) <#= DateTime.Now.Year #> All Rights Reserved
// </copyright>
// <author>neo.zhu</author>
// <date><#= DateTime.Now.ToString("G") #> </date>
// <summary>
//  根据需求定义实现具体的业务逻辑,通过依赖注入降低模块之间的耦合度
//   
//  
//  
// </summary>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using Repository.Pattern.Repositories;
using Repository.Pattern.Infrastructure;
using Service.Pattern;
using <#= ModelNamespace #>;
using <#= DefaultNamespace #>.Repositories;
using System.Data;
using System.Reflection;
using Newtonsoft.Json;
using System.IO;

namespace <#=DefaultNamespace #>.Services
{
    public class <#= ModelName #>Service : Service< <#= ModelName #> >, I<#= ModelName #>Service
    {

        private readonly IRepositoryAsync<<#= ModelName #>> _repository;
		 private readonly IDataTableImportMappingService _mappingservice;
        public  <#= ModelName #>Service(IRepositoryAsync< <#= ModelName #>> repository,IDataTableImportMappingService mappingservice)
            : base(repository)
        {
            _repository=repository;
			_mappingservice = mappingservice;
        }
        
        <# 
            PropertyMetadata primaryKey = ModelMetadata.PrimaryKeys.FirstOrDefault();
           foreach (PropertyMetadata property in ModelMetadata.Properties) { 
                if (property.IsForeignKey) {

        #>
         public  IEnumerable<<#= ModelName #>> GetBy<#= property.PropertyName.Replace("_","") #>(<#= primaryKey.ShortTypeName #>  <#= property.PropertyName.Replace("_","").ToLower() #>)
         {
            return _repository.GetBy<#= property.PropertyName.Replace("_","") #>(<#= property.PropertyName.Replace("_","").ToLower() #>);
         }
         <#
                }
            }
         #>
         <#
            //PropertyMetadata primaryKey = ModelMetadata.PrimaryKeys.FirstOrDefault();
		foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {           
            if (property.AssociationDirection == AssociationDirection.OneToMany ) 
            {       
            var relmodemeta = OneToManyModelMetadata[property.PropertyName];
            var relatedEntities = relmodemeta.RelatedEntities;
            var foreignKeyNames = relatedEntities.Where(n=>n.EntitySetName ==ModelMetadata.EntitySetName).Select(n=>n.ForeignKeyPropertyNames).First();
            var foreignKeyName = foreignKeyNames[0];
        #>
        public IEnumerable<<#= property.RelatedModel.ShortTypeName #>>   Get<#= property.PropertyName #>By<#= foreignKeyName #> (<#= primaryKey.ShortTypeName #> <#= foreignKeyName.ToLower() #>)
        {
            return _repository.Get<#= property.PropertyName #>By<#= foreignKeyName #>(<#= foreignKeyName.ToLower() #>);
        }
        <#
            }
        }
        #> 
        

		public void ImportDataTable(System.Data.DataTable datatable)
        {
            foreach (DataRow row in datatable.Rows)
            {
                 
                <#= ModelName #> item = new <#= ModelName #>();
				var mapping = _mappingservice.Queryable().Where(x => x.EntitySetName == "<#= ModelName #>" &&  x.IsEnabled==true).ToList();

                foreach (var field in mapping)
                {
                 
						var defval = field.DefaultValue;
						var contation = datatable.Columns.Contains((field.SourceFieldName == null ? "" : field.SourceFieldName));
						if (contation && row[field.SourceFieldName] != DBNull.Value)
						{
							Type <#= ModelName.ToLower() #>type = item.GetType();
							PropertyInfo propertyInfo = <#= ModelName.ToLower() #>type.GetProperty(field.FieldName);
							propertyInfo.SetValue(item, Convert.ChangeType(row[field.SourceFieldName], propertyInfo.PropertyType), null);
						}
						else if (!string.IsNullOrEmpty(defval))
						{
							Type <#= ModelName.ToLower() #>type = item.GetType();
							PropertyInfo propertyInfo = <#= ModelName.ToLower() #>type.GetProperty(field.FieldName);
							if (defval.ToLower() == "now" && propertyInfo.PropertyType ==typeof(DateTime))
                            {
                                propertyInfo.SetValue(item, Convert.ChangeType(DateTime.Now, propertyInfo.PropertyType), null);
                            }
                            else
                            {
                                propertyInfo.SetValue(item, Convert.ChangeType(defval, propertyInfo.PropertyType), null);
                            }
						}
                }
                
                this.Insert(item);
               

            }
        }
		<# 
			 var modelVariablePlural=ModelMetadata.EntitySetName.ToLower();
			 var lambdaVar = "p";
		     var includeExpressions = "";
			 var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
			 includeExpressions = String.Join("", relatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
			 
		#>

		public Stream ExportExcel(string filterRules = "",string sort = "<#= PrimaryKeyName #>", string order = "asc")
        {
            var filters = JsonConvert.DeserializeObject<IEnumerable<filterRule>>(filterRules);
                       <# if(!String.IsNullOrEmpty(includeExpressions)) { #>
			 
            var <#= modelVariablePlural #>  = this.Query(new <#= ModelName #>Query().Withfilter(filters))<#= includeExpressions #>.OrderBy(n=>n.OrderBy(sort,order)).Select().ToList();
            
            <#    } else { #>
            var <#= modelVariablePlural #>  = this.Query(new <#= ModelName #>Query().Withfilter(filters)).OrderBy(n=>n.OrderBy(sort,order)).Select().ToList();
            <#    } #>
            var datarows = <#= modelVariablePlural #> .Select( <#= SelectLambdaText #>).ToList();
           
            return ExcelHelper.ExportExcel(typeof(<#= ModelName #>), datarows);

        }
    }
}



