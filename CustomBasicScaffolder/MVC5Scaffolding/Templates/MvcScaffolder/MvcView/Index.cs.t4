<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model IEnumerable<#= "<" + ViewDataTypeName + ">" #>
<#
	var modelVariable = ModelMetadata.EntitySetName.ToLower();
	var primaryKeyName = GetPrimaryKeyName(); 
	var PageTitle =(string.IsNullOrEmpty(ProgramTitle)==true?ControllerRootName:ProgramTitle);
#>
<#
	var modelName =  ModelMetadata.EntitySetName;
#>
@{
	ViewBag.Title = "<#= PageTitle #>";
}
<!-- MAIN CONTENT -->
<div id="content">
    <!-- quick navigation bar -->
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-table fa-fw "></i>
                Home
                <span>
                    >
                  <#= PageTitle #>
                </span>
            </h1>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">
            
        </div>
    </div>
    <!-- end quick navigation bar -->


     <!-- widget grid -->
     <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"
                    -->
                    <header>
                        <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                        <h2><#= PageTitle #></h2>
                    </header>

                     <!-- widget div-->
                    <div>
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->
                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <div class="alert alert-warning no-margin fade in">
                                <button class="close" data-dismiss="alert">
                                    ×
                                </button>
                                <i class="fa-fw fa fa-info"></i>
                                注意事项:
                            </div>
	 <!--begin datagrid-content -->
	 <div class="table-responsive">
		<table id="<#= modelVariable #>_datagrid">  
		</table>
				<div id="<#= modelVariable  #>_toolbar" style="height:auto">
                            @{
                            //TODO: enable authorization 
                            }
							@*@if (Html.IsAuthorize("Create"))
							{
								<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-plus fa-fw',plain:true" onclick="append()">新增</a>
							}
							@if (Html.IsAuthorize("Delete"))
							{
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-trash-o fa-fw',plain:true" onclick="removeit()">删除</a>
							}
							@if (Html.IsAuthorize("Edit"))
							{
								<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-floppy-o fa-fw',plain:true" onclick="accept()">保存</a>
								<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-undo fa-fw',plain:true" onclick="reject()">取消</a>
							}
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-refresh fa-fw',plain:true" onclick="reload()">刷新</a>
							@if (Html.IsAuthorize("Import"))
							{
								 <a href="javascript:void(0)" class="easyui-menubutton" data-options="menu:'#importmenu',iconCls:'fa fa-upload fa-fw' " onclick="importexcel()">导入数据</a>
                                       <div id="importmenu" style="width:150px;">
                                                <div data-options="iconCls:'fa fa-file-excel-o fa-fw'" onclick="importexcel()">导入数据</div>
                                                <div data-options="iconCls:'fa fa-cloud-download fa-fw'" onclick="downloadtemplate()" >下载用于导入的模板</div>
                                        </div>
                                 <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-cloud-download fa-fw',plain:true" onclick="exportexcel()">导出至Excel</a>
							}*@
						    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-plus fa-fw',plain:true" onclick="append()">新增</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-trash-o fa-fw',plain:true" onclick="removeit()">删除</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-floppy-o fa-fw',plain:true" onclick="accept()">保存</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-undo fa-fw',plain:true" onclick="reject()">取消</a>
							<a href="javascript:void(0)" class="easyui-menubutton" data-options="menu:'#importmenu',iconCls:'fa fa-upload fa-fw' " onclick="importexcel()">导入数据</a>
                                       <div id="importmenu" style="width:150px;">
                                                <div data-options="iconCls:'fa fa-file-excel-o fa-fw'" onclick="importexcel()">导入数据</div>
                                                <div data-options="iconCls:'fa fa-cloud-download fa-fw'" onclick="downloadtemplate()" >下载用于导入的模板</div>
                                        </div>
                            <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-cloud-download fa-fw',plain:true" onclick="exportexcel()">导出至Excel</a>
							<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-refresh fa-fw',plain:true" onclick="reload()">刷新</a>
				            <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-question-circle-o fa-fw',plain:true" onclick="dohelp()">帮助</a>
                </div>
		
		
		</div>
		<!--end datagrid-content -->
                        
                         </div>
                        <!-- end widget content -->
                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- WIDGET END -->

        </div>

        <!-- end row -->
    </section>
    <!-- end widget grid -->

	<!-- file upload partial view -->
	@Html.Partial("_ImportWindow",new  ViewDataDictionary { { "EntityName","<#= ModelTypeName #>" }})		 
	<!-- end file upload partial view -->
        
    <!-- detail popup window -->
    @Html.Partial("_PopupDetailFormView",new <#=ViewDataTypeName #>() )
    <!-- end detail popup window -->
            
</div>
<!-- END MAIN CONTENT -->

@section Scripts {
	<script type="text/javascript">
        var entityname = "<#= ModelTypeName #>";


			        //下载Excel导入模板
                    function downloadtemplate() {
                            //TODO: 修改下载模板的路径
                            var url = "/ExcelTemplate/<#= ModelTypeName #>.xlsx";
                            $.fileDownload(url)
                             .fail(function () { $.messager.alert("错误","没有找到模板文件! {" + url + "}"); });
                                                
                    }
					//打开Excel上传导入
					function importexcel() {
						$("#importwindow").window("open");
					}
					 //执行Excel到处下载
					function exportexcel() {
						var filterRules = JSON.stringify($dg.datagrid("options").filterRules);
						//console.log(filterRules);
						$.messager.progress({ title: "正在执行导出！" });
						var formData = new FormData();
						formData.append("filterRules", filterRules);
						formData.append("sort", "<#= primaryKeyName #>");
						formData.append("order", "asc");
						$.postDownload("/<#= ControllerRootName  #>/ExportExcel", formData, function (fileName) {
							$.messager.progress("close");
							console.log(fileName);

						})
					}
        //显示帮助信息
        function dohelp() {

        }
        var editIndex = undefined;
    //重新加载数据
	function reload() {
				 if (endEditing()) {
						$dg.datagrid("reload");
				 }
			}
    //关闭编辑状态
	function endEditing() {
			if (editIndex == undefined) { return true }
			if ($dg.datagrid("validateRow", editIndex)) {

				<# 
				  foreach(RelatedModelMetadata relatedModel in 	ModelMetadata.RelatedEntities)
				  {
					  string relForeignKey = relatedModel.ForeignKeyPropertyNames[0];
					  string reldisplayname = GetRelatedDisplayNameExpression(relForeignKey,ModelMetadata); 
				#>
				var ed = $dg.datagrid("getEditor", { index: editIndex, field: "<#= relForeignKey #>" });
				var <#= reldisplayname.ToLower() #> = $(ed.target).combobox("getText");
				var <#= relForeignKey.ToLower() #> = $(ed.target).combobox("getValue");
				$dg.datagrid("getRows")[editIndex]["<#= reldisplayname #>"] =  <#= reldisplayname.ToLower() #>;
				$dg.datagrid("getRows")[editIndex]["<#=  relForeignKey #>"] = <#= relForeignKey.ToLower() #>;
				<# } #>
				$dg.datagrid("endEdit", editIndex);
				editIndex = undefined;
                return true;
			} else {
				return false;
			}
		}
    //单击列开启编辑功能
	function onClickCell(index, field) {
			var _operates = ["_operate1", "_operate2", "_operate3", "ck"]
			if ($.inArray(field, _operates) >= 0) {
				return;
			}
			if (editIndex != index) {
				if (endEditing()) {
					$dg.datagrid("selectRow", index)
							.datagrid("beginEdit", index);
                    editIndex = index;
					var ed = $dg.datagrid("getEditor", { index: index, field: field });
					if (ed) {
						($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
					}
				} else {
					$dg.datagrid("selectRow", editIndex);
				}
			}
		}
    //新增记录
	function append() {
			if (endEditing()) {
				//$dg.datagrid("appendRow", { Status: 0 });
				//editIndex = $dg.datagrid("getRows").length - 1;
				$dg.datagrid("insertRow", { index: 0, row: { <#= FieldDefaultValueExpression #> } });
				editIndex = 0 ;
				$dg.datagrid("selectRow", editIndex)
						.datagrid("beginEdit", editIndex);
			}
		}
    //删除编辑的行
	function removeit() {
			if (editIndex == undefined) { return }
			$dg.datagrid("cancelEdit", editIndex)
					.datagrid("deleteRow", editIndex);
			editIndex = undefined;
	}
    //提交保存后台数据库
	function accept() {
			if (endEditing()) {
				if ($dg.datagrid("getChanges").length) {
					var inserted = $dg.datagrid("getChanges", "inserted");
					var deleted = $dg.datagrid("getChanges", "deleted");
					var updated = $dg.datagrid("getChanges", "updated");
					var effectRow = new Object();
					if (inserted.length) {
						effectRow.inserted = inserted;
					}
					if (deleted.length) {
						effectRow.deleted = deleted;
					}
					if (updated.length) {
						effectRow.updated = updated;
					}
					//console.log(JSON.stringify(effectRow));
					$.post("/<#= ControllerRootName #>/SaveData", effectRow, function (response) {
						//console.log(response);
						if (response.Success) {
							$.messager.alert("提示", "提交成功！");
							$dg.datagrid("acceptChanges");
							$dg.datagrid("reload");
						}
					}, "json").fail(function (response) {
						//console.log(response);
						$.messager.alert("错误", "提交错误了！","error");
						//$dg.datagrid("reload");
					});
				}
			}
		}
		function reject() {
			$dg.datagrid("rejectChanges");
			editIndex = undefined;
		}
		function getChanges() {
			var rows = $dg.datagrid("getChanges");
			alert(rows.length + " rows are changed!");
		}
        //弹出明细信息
		function showDetailsWindow(id) {
			//console.log(index, row);
            $.getJSON('/<#= ControllerRootName #>/PopupEdit/' + id, function (data, status, xhr) {
                //console.log(data);
                $('#detailswindow').window('open');
                loadData(id,data);
            });
		}

        //初始化定义datagrid
        var $dg = $("#<#= modelVariable #>_datagrid");
        $(function () {
		 //定义datagrid结构
         $dg.datagrid({
                        rownumbers:true,
				        checkOnSelect:true,
				        selectOnCheck:true,
				        idField:'<#= primaryKeyName #>',
				        sortName:'<#= primaryKeyName #>',
				        sortOrder:'desc',
				        remoteFilter: true,
				        singleSelect: true,
				        toolbar: '#<#= modelVariable  #>_toolbar',
				        url: '/<#= ControllerRootName #>/GetData',
				        method: 'get',
				        onClickCell: onClickCell,
				        pagination: true,
                        striped:true,   
                        columns: [[
                         /*开启CheckBox选择功能*/
                         /*{ field: 'ck', checkbox: true },*/
                         { 
                            field: '_operate1',
                            title:'操作',
                            width: 120,
                            sortable: false,
                            resizable: true,
                            formatter: function showdetailsformatter(value, row, index) {
                                        return '<a onclick="showDetailsWindow(' + row.Id + ')" class="btn btn-default btn-sm" href="javascript:void(0)"><i class="fa fa-list"></i> 查看明细</a>';
                                    }
                          },
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
		var tdalign=property.ShortTypeName=="string"?"left":"right";
		var fieldtypename = property.ShortTypeName;
		var fieldDisplayAttribute = FieldDisplayAttribute.Where(x=>x.EntityTypeName == ModelTypeName && x.FieldName==property.PropertyName).FirstOrDefault();
		string prompt="";
		if(fieldDisplayAttribute!=null){
			 prompt = fieldDisplayAttribute.Prompt;
		}
		var isRequired = false;
	
		fieldRequired.TryGetValue(property.PropertyName, out isRequired);
		var maxLength =string.Empty;
		fieldMaxLength.TryGetValue(property.PropertyName,out maxLength);
	if (property.Scaffold && !property.IsAssociation) {
#>
<#
		// We do not want to show any association properties for which there is
		// no associated foreign key.
		//if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
		//    continue;
		//}
#>
<# if ( property.IsPrimaryKey || property.IsReadOnly) { 
#>
		     /*{field:'<#= property.PropertyName  #>',width:80 ,sortable:true,resizable:true }*/
<# } else if (property.IsForeignKey) { 
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
#>
			{
                field:'<#= foreignKeyPropertyName  #>',
                title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)',
                width:160, 
                sortable:true, 
                resizable:true,
                formatter:function(value,row) {
				        return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,ModelMetadata)  #>;
					},
			    editor:{
					    type:'combobox',
					    options:{
								prompt:'<#= prompt #>' ,
                                mode: 'remote',
								valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
								textField:'<#= relatedModel.DisplayPropertyName   #>',
								method:'get',
								url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
								required:<#= isRequired.ToString().ToLower() #>
							}
						}
			},
<#  } else {  
    	if(fieldtypename=="string") {
         if(property.PropertyName=="Status")  {
#>
            {
                 field:'<#= property.PropertyName #>',
                 title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
                 width:100,
                 align:'right',
			     editor:{ 
                       /*需要在键值对中维护status枚举值并生成JavaScript才能使用*/
                       type:'statuseditor',
					   options:{
						     	prompt:'<#= prompt #>' ,
								required:<#= isRequired.ToString().ToLower() #>
                                } 
					   },
			     formatter: statusformatter
			},
<#    }  else  {  
#>
			{
                 field:'<#= property.PropertyName #>', 
                 title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
                 width:140,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'<#= prompt #>',required:<#= isRequired.ToString().ToLower() #> <#= maxLength #>  }  
                       },
                 sortable:true,
                 resizable:true 
			},
<# } } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
			 if(property.PropertyName=="Status") {
#>
			{
                 field:'<#= property.PropertyName #>',
                 title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
                 width:100,
                 align:'right',
			     editor:{ 
                       /*需要在键值对中维护status枚举值并生成JavaScript才能使用*/
                       type:'statuseditor',
					   options:{
						     	prompt:'<#= prompt #>' ,
								required:<#= isRequired.ToString().ToLower() #>
                                } 
					   },
			     formatter: statusformatter
			},
<#   } else {  
#>
			{
                 field:'<#=  property.PropertyName  #>', 
                 title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
                 width:100, 
                 align:'right',
                 editor:{
                        type:'numberbox',
                        options:{prompt:'<#= prompt #>', required:<#= isRequired.ToString().ToLower() #>  <#= maxLength #> } 
                        },
                sortable:true,
                resizable:true 
			},
<#   }   } else if(fieldtypename=="DateTime" ) {
#>
			{
                field:'<#=  property.PropertyName  #>', 
                title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
                width:160, 
                align:'right', 
                editor:{
                      type:'datebox',
                      options:{prompt:'<#= prompt #>',required:<#= isRequired.ToString().ToLower() #>}  
                      },
                sortable:true, 
                resizable:true, 
                formatter:dateformatter 
			},
<# } else if(fieldtypename=="bool" || fieldtypename=="Boolean" ){ 
#>
			{
               field:'<#= property.PropertyName #>', 
               title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
               width:120, 
               align:'center',
               editor:{
                      type:'booleaneditor',
                      options:{
                                 prompt:'<#= prompt #>', 
                                 required:<#= isRequired.ToString().ToLower() #>
                               } 
                      },
                formatter:booleanformatter,
                sortable:true, 
                resizable:true 
			},
<# }  else  if ( fieldtypename=="bool" ) { 
#>
			 {
                field:'<#= property.PropertyName #>',  
                title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', width:120, 
                width:120,
                editor: {
                        type:'booleaneditor',
						options:{
								    prompt:'<#= prompt #>' ,
									required:<#= isRequired.ToString().ToLower() #>
                                 }
                       },
                formatter:booleanformatter,
                sortable:true, 
                resizable:true 
			 },
<# } else { 
#>
			{
               field:'<#= property.PropertyName #>', 
               title:'@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)', 
               width:120, 
               editor:{
                    type:'textbox', 
                    options:{
                             prompt:'<#= prompt #>', 
                             required:<#= isRequired.ToString().ToLower() #> <#= maxLength #>
                            } 
                     }, 
                sortable:true, 
                resizable:true 
              },
<# } #>
<#            } #>
<#
	                      }
                        }
#>
                         ]]
                 });

           $dg.datagrid("enableFilter",[
<# 
				foreach(var property in  ModelMetadata.Properties.Where(x=>x.PropertyName=="Status" && x.Scaffold==true))
				{
#>
                /*需要在键值队维护好status枚举值*/
				{
					  field: "<#= property.PropertyName #>",
					  type: "statusfilter",
					  options: {
					
						       }
				 },
<# 
				}
#>
<# 
				foreach(var property in  ModelMetadata.Properties.Where(x=> x.IsForeignKey==false && (x.ShortTypeName=="float" || x.ShortTypeName=="decimal" || x.ShortTypeName=="double" || x.ShortTypeName=="int") && x.Scaffold==true))
				{
#>
				{
					  field: "<#= property.PropertyName #>",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
<# 
				}
#>
<# 
				foreach(var property in  ModelMetadata.Properties.Where(x=>x.ShortTypeName=="DateTime" && x.Scaffold==true))
				{
#>
				{
					  field: "<#= property.PropertyName #>",
					  type: "dateRange",
					  options: {
						  onChange: function (value) {
							    $dg.datagrid("addFilterRule", {
									  field: "<#= property.PropertyName #>",
									  op: "between",
									  value: value
								  });
							   
							    $dg.datagrid("doFilter");
						  }
					  }
				  },
<# 
				}
#>
<# 
			foreach(var property in  ModelMetadata.Properties.Where(x=>x.IsForeignKey==true && x.Scaffold==true))
			{
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
#>
		   {
				 field: "<#= foreignKeyPropertyName #>",
				 type:"combobox",
				 options:{
								valueField:"<#= relatedModel.PrimaryKeyNames[0]  #>",
								textField:"<#= relatedModel.DisplayPropertyName   #>",
								method:"get",
								url:"/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>",
								onChange: function (value) {
								if (value == "") {
									$dg.datagrid("removeFilterRule", "<#=  foreignKeyPropertyName #>");
								} else {
									$dg.datagrid("addFilterRule", {
										field: "<#=  foreignKeyPropertyName #>",
										op: "equal",
										value: value
								});
							}
							$dg.datagrid("doFilter");
						}
					}
		   },
<# 
			} 
#>
		   ]);
	 });

	
		
  
		<# 
			var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName;
			var foreignKeyVar = ModelTypeName.ToLower() + primaryKey.ToLower();
			var foreignKey = ModelTypeName+ primaryKey;
		#>
	 </script>
     <script src="~/Scripts/jquery.filerupload.js"></script>
}

 
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>