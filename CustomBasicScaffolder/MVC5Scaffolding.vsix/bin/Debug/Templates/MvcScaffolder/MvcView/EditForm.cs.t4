﻿<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>
 <!-- 输出form表单界面 -->
<fieldset>
    <div class="row">
<#
    int cols = FromLayoutCols;
    int col = 12/cols;
	int colindex= -1;
	int mod = 0;
    var entityName = ModelTypeName;
	var fields = FieldDisplayAttribute.Where(x=>x.EntityTypeName == entityName ).OrderBy(x=>x.Order).ToList();
	foreach(var item in fields)
	{
		string prompt = item.Prompt;
		string displayName = item.Name;
		string description = item.Description;
		var property = ModelMetadata.Properties.Where(n=>n.PropertyName==item.FieldName && !n.IsAssociation ).FirstOrDefault();
		if(property==null) continue;
		var isRequired = false;
		fieldRequired.TryGetValue(property.PropertyName, out isRequired);
		string required = isRequired.ToString().ToLower();
		string maxLength = string.Empty;
		fieldMaxLength.TryGetValue(property.PropertyName,out maxLength);
		colindex ++ ;
		mod = colindex % cols;
#>
        <#
		//如果是主键
		if(property.IsPrimaryKey) {
			string autoGenerated =  property.IsAutoGenerated?"disabled":"" ; 
	    #>
	    <# if (property.ShortTypeName=="DateTime") { #>
        <section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
            <i class="icon-append fa fa-calendar"></i>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>" 
                   type="text" 
                   class="datepicker" 
                   data-dateformat="dd/mm/yy"
                   readonly
             />
              <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
        </label>
        </section>
			  <# } else if (property.ShortTypeName=="string") { #>
           <section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"  
                   type="text" 
                   readonly
                  />
                  <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
             </label>
        </section>
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   type="text" 
                   />
                 <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
              <# } else { #>
              <section class="col col-<#= col #>">
           <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
           <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
                   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
                   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
                   tabindex="<#= colindex.ToString() #>"   
                   type="text" 
                   />
             <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			  <# } #>
			<# 
			  //如果是外键
			  } else if (property.IsForeignKey) { 
			   string foreignKeyPropertyName = property.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,ModelMetadata);
			   string  relatedmodelName =  relatedModel.EntitySetName;
			   string  relatedPKname = relatedModel.PrimaryKeyNames[0];
			   string  relatedDisplayFieldName = relatedModel.DisplayPropertyName;
			   string  url = "/" +  ControllerRootName + "/Get" +  relatedModel.EntitySetName ;
			#>
             <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
			      @Html.DropDownListFor(model => model.<#= property.PropertyName #>, ViewBag.<#= property.PropertyName #> as List<SelectListItem>, htmlAttributes: new { @class = "select2" }) 
                 <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			<# } else {  #>
			  <# if (property.ShortTypeName=="DateTime") { #>
            <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
            <i class="icon-append fa fa-calendar"></i>
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
			       name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   tabindex="<#= colindex.ToString() #>" 
				   class="datepicker" data-dateformat="dd/mm/yy"
				   type="text" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				    />
             <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			  <# } else if (property.ShortTypeName=="string") { #>
            <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
			<input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				    type="text" 
				   />
             <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
			  <# } else if (property.ShortTypeName=="int" || property.ShortTypeName=="float" || property.ShortTypeName=="decimal")  { #>
			<section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
				   name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                   placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
				   value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
				   tabindex="<#= colindex.ToString() #>" 
				   type="text" 
				   />
                 <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
			    </label>
            </section>
              <# } else if (property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean")  { #>
			  <section class="col col-<#= col #>">
              <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
              <label class="checkbox">
                 <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)"
                       name="@Html.NameFor(model => model.<#= property.PropertyName #>)"
                       value="true" @(Model.<#= property.PropertyName #> ? "checked=\"checked\"" : "")
                       tabindex="6"
                       type="checkbox" />
                <i></i>
                <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
            </label>
            </section>
              <# } else { #>
            <section class="col col-<#= col #>">
            <label class="label">@Html.DisplayNameFor(model => model.<#= property.PropertyName #>) </label>
            <label class="input">
            <input id="@Html.IdFor(model => model.<#= property.PropertyName #>)" 
					name="@Html.NameFor(model => model.<#= property.PropertyName #>)" 
                    placeholder="@Html.DisplayNameFor(model => model.<#= property.PropertyName #>)" 
					value="@Html.ValueFor(model => model.<#= property.PropertyName #>)"
					tabindex="<#= colindex.ToString() #>" 
					type="text" 
					 />
                        <b class="tooltip tooltip-bottom-right"><#= prompt  #></b>
            </label>
            </section>
			  <# } #>
			<# } #>
	 
	  
	    
	<# } #>
    </div>
</fieldset>

<!--========================================================================================-->
 <#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
<fieldset>
    <div class="row">
        <section class="col col-md-12 col-lg-12">
    <!-- details tabs -->
    <div class="tabs-container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs">
<#
		var idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
            var submetadata =  dic.Value;
            var entitySetNameToLower = submetadata.EntitySetName.ToLower();
			string subpropertyName = dic.Key;
			
#>
				<#  if(idx==0)  {#>
				<li class="active"><a data-toggle="tab" href="#tab-<#= entitySetNameToLower  #>"> <#= subpropertyName #></a></li>
				<# } else { #>
				<li class=""><a data-toggle="tab" href="#tab-<#= entitySetNameToLower  #>"> <#= subpropertyName #></a></li>	 		 
				<# } #>
<# 
	    idx ++;
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		 <#
			idx=0;
        foreach (var dic in OneToManyModelMetadata) 
        {
                var submetadata =  dic.Value;
                var entitySetNameToLower = submetadata.EntitySetName.ToLower();
             	var subpropertyName = dic.Key;
          #>
		  <div id="tab-<#= entitySetNameToLower   #>" class="tab-pane <#= idx>0?"":"active"  #>">
            <div class="panel-body">
                <div class="table-responsive">
				<table id="<#= entitySetNameToLower  #>_datagrid" >
                </table>
				<div id="<#= entitySetNameToLower #>_toolbar" style="height:auto">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-plus fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_createitem()">新增</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-trash-o fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_removeitem()">删除</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-floppy-o fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_saveitem()">保存</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'fa fa-undo fa-fw',plain:true" onclick="<#= subpropertyName.ToLower() #>_reject()">取消</a>
                </div>
                </div>
            </div>
        </div>
		  <# idx++;
           }
		  #>
	</div>
	</div>
 
<!--end details tabs -->
        </section>
    </div>
</fieldset>
<#  } #>



 <script type="text/javascript">
   var id=@Model.Id;
   <#  if(GenerateMasterDetailRelationship  && OneToManyModelMetadata.Count >0) 
			 { 
	 #>
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = $(e.target).attr("href") // activated tab
        <#
        foreach (var dic in OneToManyModelMetadata) 
        {
            var submetadata =  dic.Value;
            var entitySetNameToLower = submetadata.EntitySetName.ToLower();
			string subpropertyName = dic.Key;
        #>
        if(target=="#tab-<#= entitySetNameToLower  #>")
             $<#= entitySetNameToLower #>dg.datagrid("resize");
        <# } #>
    });
		 
				<# 
				foreach (var prop in ModelMetadata.Properties.Where(x=>x.AssociationDirection == AssociationDirection.OneToMany)) 
				{
					var submetadata =  OneToManyModelMetadata[prop.PropertyName];
					var entitySetName = submetadata.EntitySetName;
					var entitySetNameToLower = submetadata.EntitySetName.ToLower();
					var subModeType = prop.ShortTypeName;
					var datagridelement = entitySetNameToLower + "_datagrid";
					var datagridvar = "$"+ entitySetNameToLower +  "dg";
					var editindex = entitySetNameToLower + "_editIndex";
					var detailnamevar = entitySetNameToLower;
					var subforeignKey = submetadata.RelatedEntities.Where(x=>x.ShortTypeName == ModelTypeName).First().ForeignKeyPropertyNames[0];
				#>
				//--------------------------------------------------------------------
				// #<#=  datagridelement #> functions
				//--------------------------------------------------------------------
				var <#= datagridvar #> = $("#<#= datagridelement  #>");

				var <#= editindex #> = undefined;
		function <#= detailnamevar #>_reload() {
				<#= datagridvar #>.datagrid("reload");
			}
	function <#= detailnamevar #>_endEditing() {
		if ( <#= editindex #> == undefined) { return true }
		if (<#= datagridvar #>.datagrid("validateRow", <#= editindex #>)) {
			<# 
				RelatedModelMetadata[] relmodelms = submetadata.RelatedEntities;
				foreach(RelatedModelMetadata relmodelm in relmodelms) 
				{
					var fkeyname=relmodelm.ShortTypeName +  relmodelm.PrimaryKeyNames[0];
					var fdispname = relmodelm.ShortTypeName + relmodelm.DisplayPropertyName;
                    if (relmodelm.ShortTypeName != ModelTypeName){
			#>
			var ed = <#= datagridvar #>.datagrid("getEditor", { index: <#= editindex #>, field: "<#= fkeyname #>" });
			var <#= fdispname #> = $(ed.target).combobox("getText");
			var <#= fkeyname #> = $(ed.target).combobox("getValue");
		  
			<#= datagridvar #>.datagrid("getRows")[<#= editindex #>]["<#= fdispname #>"] = <#= fdispname #>;
			<#= datagridvar #>.datagrid("getRows")[<#= editindex #>]["<#= fkeyname #>"] = <#= fkeyname #>;
			
			
			<# 
				}}
			#>
			<#= datagridvar #>.datagrid("endEdit", <#= editindex #>);
			<#= editindex #> = undefined;


			return true;
		} else {
			return false;
		}
	}
	function <#= detailnamevar #>_onClickCell(index, field) {
		if (<#= editindex #> != index) {
			if (<#= detailnamevar #>_endEditing()) {
				<#= datagridvar #>.datagrid("selectRow", index)
						.datagrid("beginEdit", index);
                <#= editindex #>  = index;
				var ed = <#= datagridvar #>.datagrid("getEditor", { index: index, field: field });
				if (ed) {
					($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
				}
				
			} else {
				<#= datagridvar #>.datagrid("selectRow", <#= editindex #>);
			}
		}
	}
	function <#= detailnamevar #>_createitem() {
		if (<#= detailnamevar #>_endEditing()) {
			 var <#=  ModelTypeName.ToLower() #> = <#= datagridvar #>.datagrid("getSelected");

			<#= datagridvar #>.datagrid("appendRow", { <#= subforeignKey #>:id   });
			<#= detailnamevar #>editIndex = <#= datagridvar #>.datagrid("getRows").length - 1;
			<#= datagridvar #>.datagrid("selectRow", <#= editindex #> )
					.datagrid("beginEdit", <#= editindex #>);
		}
	}
	function <#= detailnamevar #>_removeitem() {
		if (<#= editindex #>  == undefined) { return }
		<#= datagridvar #>.datagrid("cancelEdit", <#= editindex #> )
				.datagrid("deleteRow", <#= editindex #> );
		<#= detailnamevar #>editIndex = undefined;
	}
   
	function <#= detailnamevar #>_reject() {
		<#= datagridvar #>.datagrid("rejectChanges");
		<#= editindex #>  = undefined;
	}
	function <#= detailnamevar #>_getChanges() {
		var rows = <#= datagridvar #>.datagrid("getChanges");
		alert(rows.length + " rows are changed!");
	}
	function <#= detailnamevar #>_saveitem() {
			if (<#= detailnamevar #>_endEditing()) {
				if (<#= datagridvar #>.datagrid("getChanges").length) {
					var inserted = <#= datagridvar #>.datagrid("getChanges", "inserted");
					var deleted = <#= datagridvar #>.datagrid("getChanges", "deleted");
					var updated = <#= datagridvar #>.datagrid("getChanges", "updated");
					var effectRow = new Object();
					if (inserted.length) {
						effectRow.inserted = inserted;
					}
					if (deleted.length) {
						effectRow.deleted = deleted;
					}
					if (updated.length) {
						effectRow.updated = updated;
					}
					//console.log(JSON.stringify(effectRow));
					$.post("/<#= entitySetName #>/SaveData", effectRow, function (response) {
						//console.log(response);
						if (response.Success) {
							$.messager.alert("提示", "提交成功！");
							<#= datagridvar #>.datagrid("acceptChanges");
							<#= datagridvar #>.datagrid("reload");
						}
					}, "json").fail(function (response) {
						//console.log(response);
						$.messager.alert("错误", "提交错误了！","error");
					  
					});
			  
				}

				//<#= datagridvar #>.datagrid("acceptChanges");
			}
		}

	 




				<# 
				}
				#>

		 <# 
			}
		 #>


      <#  
      
        var foreignKeyVar = ModelTypeName.ToLower() + primaryKey.ToLower();
        var foreignKey = ModelTypeName+ primaryKey;
        if (GenerateMasterDetailRelationship && OneToManyModelMetadata.Count > 0) 
       {
              #>
               function initdatagrid(){
               
		<#		foreach (var prop in ModelMetadata.Properties.Where(x=>x.AssociationDirection == AssociationDirection.OneToMany)) 
				{
					var submetadata =  OneToManyModelMetadata[prop.PropertyName];
					var entitySetName = submetadata.EntitySetName;
					var entitySetNameToLower = submetadata.EntitySetName.ToLower();
					var subModeType = prop.ShortTypeName;
					var datagridelement = entitySetNameToLower + "_datagrid";
					var datagridvar = "$"+ entitySetNameToLower +  "dg";
					var editindex = entitySetNameToLower + "_editIndex";
					var detailnamevar = entitySetNameToLower;
					var subforeignKey = submetadata.RelatedEntities.Where(x=>x.ShortTypeName == ModelTypeName).First().ForeignKeyPropertyNames[0];
			 
         #>
          
          <#= datagridvar #>.datagrid({
                    rownumbers: true,
                    iconCls: 'fa fa-list',
                    idField: 'Id',
                    sortName: 'Id',
                    sortOrder: 'asc',
                    remoteFilter: true,
                    singleSelect: true,
                    toolbar: '#<#= entitySetName.ToLower() #>_toolbar',
                    method: 'get',
                    onClickCell: <#= entitySetName.ToLower() #>_onClickCell,
                    pagination: 'true',
                    url: '/<#= entitySetName #>/GetDataBy<#= foreignKey #>?<#= foreignKeyVar #>='+ id,
                    striped: true,
                    columns: [[
                    <#
							IEnumerable<PropertyMetadata> subproperties = submetadata.Properties;
							foreach (PropertyMetadata subproperty in subproperties) {
									var tdalign=subproperty.ShortTypeName=="string"?"left":"right";
									var fieldtypename = subproperty.ShortTypeName;
									var isRequired = false;
									fieldRequired.TryGetValue(subproperty.PropertyName, out isRequired);
									string required = isRequired.ToString().ToLower();
									string maxLength = string.Empty;
									fieldMaxLength.TryGetValue(subproperty.PropertyName,out maxLength);
									if (subproperty.Scaffold && !subproperty.IsAssociation) {
						#>
						<# if ( subproperty.IsPrimaryKey || subproperty.IsReadOnly) { #>
								@*{field:'<#= subproperty.PropertyName  #>',
                                   title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                   width:80 },*@
						<# } else if (subproperty.IsForeignKey) { 
								string foreignKeyPropertyName = subproperty.PropertyName;
								RelatedModelMetadata relatedModel = submetadata.RelatedEntities.Where(x=>x.ForeignKeyPropertyNames[0]==foreignKeyPropertyName).First();
								string relatedtypeName = relatedModel.ShortTypeName;
								if(relatedtypeName != ModelTypeName ) {
						#>
							    {field:'<#= foreignKeyPropertyName  #>',
                                 title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                 width:160,
								 formatter:function(value,row){
												return row.<#= GetRelatedDisplayNameExpression(foreignKeyPropertyName,submetadata)  #>;
											},
								 editor:{
                                         type:'combobox',
										 options:{
                                                prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
												mode: 'remote',
                                                valueField:'<#= relatedModel.PrimaryKeyNames[0]  #>',
											    textField:'<#= relatedModel.DisplayPropertyName   #>',
												method:'get',
												url:'/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>',
												required:<#= required  #> <#= maxLength #>
												}
								 }},
						<# } } else { #>
						<#	if(fieldtypename=="string") {	#>
								{ field:'<#= subproperty.PropertyName #>',
                                  title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                  width:140,
                                  editor:{
                                          type:'textbox',
                                          options:{
                                                prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                                required:<#= required  #> <#= maxLength #>
                                                 }
                                           } },
							<# } else if(fieldtypename=="int" || fieldtypename=="float"|| fieldtypename=="decimal") {
									if(subproperty.PropertyName=="Status") {
						    #>
							{ field:'<#= subproperty.PropertyName #>',
                                  title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                  width:120,
                                  align:'right',
                                  editor:{ 
                                        type:'combobox',
                                            options:{
                                                    prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                                    panelHeight: 'auto',
                                                    data: [ { value: '0', text: '启用' },{ value: '1', text: '禁用' } ],
                                                    required:true 
                                                    } 
                                            }  ,formatter:statusformatter
                                  },
							<#   } else {  #>
						     { field:'<#=  subproperty.PropertyName  #>',
                                   title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                   width:120,
                                   align:'right',
                                   editor:{
                                           type:'numberbox',
                                           options:{
                                                   prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                                   required:<#= required  #> <#= maxLength #>
                                             } 
                                           } ,
                                   sortable:true,
                                   resizable:true },
							<#   }   } else if(fieldtypename=="DateTime" ) { #>
								{ field:'<#=  subproperty.PropertyName  #>',
                                  title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                  width:160,
                                  align:'right',
                                  editor:{
                                          type:'datebox',
                                          options:{
                                             prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                             required:<#= required  #>
                                           }
                                          },
                                   formatter:dateformatter},
							<# } else if(fieldtypename=="bool" || fieldtypename=="Boolean" ){ #>
								{field:'<#= subproperty.PropertyName #>',
                                 title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                 width:120,
                                 editor: {type:'combobox',
                                            options:{
                                                prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                                panelHeight: 'auto',
                                                data: [ { value: 'true', text: 'true' },{ value: 'false', text: 'false' }],
                                                required:true}}"><#= GetDisplayName(subproperty.PropertyName) #></th>
							<# } else { #>
								{ field:'<#= subproperty.PropertyName #>',
                                  title:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                  width:120,
                                  editor:{
                                          type:'textbox',
                                          options:{
                                            prompt:'<#= GetDisplayName(subproperty.PropertyName) #>',
                                          }
                                          }
                                 }
							<# } #>
						<#     } #>
					<#
							}
					    //foreach (PropertyMetadata subproperty in subproperties) {
						}
					#>
                    
                    
                    
                    ]]
          });
                
                <#= datagridvar #>.datagrid("enableFilter", [
                <# 
				foreach(var subproperty in  submetadata.Properties.Where(x=>x.PropertyName=="Status" && x.Scaffold==true))
				{

		   #>
				{
					  field: "<#= subproperty.PropertyName #>",
					  type: "combobox",
					  options: {
						   panelHeight: "auto",
						   data: [{ value: "", text: "All" }, { value: 0, text: "启用" }, { value: 1, text: "禁用" }],
						   onChange: function (value) {
							  if (value == "") {
								  <#= datagridvar #>.datagrid("removeFilterRule", "<#= subproperty.PropertyName #>");
							  } else {
								  <#= datagridvar #>.datagrid("addFilterRule", {
									  field: "<#= subproperty.PropertyName #>",
									  op: "equal",
									  value: value
								  });
							  }
							  $dg.datagrid("doFilter");
						  }
					  }
				  },
		   <# 
				}
		   #>

           <# 
				foreach(var subproperty in  submetadata.Properties.Where(x=> x.IsForeignKey==false && (x.ShortTypeName=="float" || x.ShortTypeName=="decimal" || x.ShortTypeName=="double" || x.ShortTypeName=="int") && x.Scaffold==true))
				{

		   #>
				{
					  field: "<#= subproperty.PropertyName #>",
					  type: "numberbox",
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
		   <# 
				}
		   #>


		   <# 
				foreach(var subproperty in  submetadata.Properties.Where(x=>x.ShortTypeName=="DateTime" && x.Scaffold==true))
				{

		   #>
				{
					  field: "<#= subproperty.PropertyName #>",
					  type: "dateRange",
					  options: {
						  onChange: function (value) {
							    <#= datagridvar #>.datagrid("addFilterRule", {
									  field: "<#= subproperty.PropertyName #>",
									  op: "between",
									  value: value
								  });
							   
							    <#= datagridvar #>.datagrid("doFilter");
						  }
					  }
				  },
		   <# 
				}
		   #>
		   
		   <# 
			foreach(var subproperty in  submetadata.Properties.Where(x=>x.IsForeignKey==true && x.Scaffold==true))
			{
			   string foreignKeyPropertyName = subproperty.PropertyName;
			   RelatedModelMetadata relatedModel = GetRelatedModelMetadata(foreignKeyPropertyName,submetadata);
		   #>
		   {
				 field: "<#= foreignKeyPropertyName #>",
				 type:"combobox",
				 options:{
								valueField:"<#= relatedModel.PrimaryKeyNames[0]  #>",
								textField:"<#= relatedModel.DisplayPropertyName   #>",
								method:"get",
								url:"/<#= ControllerRootName #>/Get<#=  relatedModel.EntitySetName  #>",
								onChange: function (value) {
								if (value == "") {
									<#= datagridvar #>.datagrid("removeFilterRule", "<#=  foreignKeyPropertyName #>");
								} else {
									<#= datagridvar #>.datagrid("addFilterRule", {
										field: "<#=  foreignKeyPropertyName #>",
										op: "equal",
										value: value
								});
							}
							<#= datagridvar #>.datagrid("doFilter");
						}
					}
		   },
		   <# 
			} 
		   #>
									]);
         <# }  #>
         }
         /* 初始化datagrid */
         initdatagrid();

  <# } #>

  

 </script>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
