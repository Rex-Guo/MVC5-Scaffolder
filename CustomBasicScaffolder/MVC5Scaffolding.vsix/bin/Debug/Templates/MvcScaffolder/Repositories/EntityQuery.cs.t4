<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ModelNamespace" #>
<#@ parameter type="System.String" name="FolderNamespace" #>
<#@ parameter type="System.String" name="ModelName" #>
<#@ parameter type="System.String" name="PluralizedModelName" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="PrimaryKeyName" #>
<#@ parameter type="System.String" name="QueryLambdaText" #>
// <copyright file="<#= ModelName #>Query.cs" company="neozhu/MVC5-Scaffolder">
// Copyright (c) <#= DateTime.Now.Year #> All Rights Reserved
// </copyright>
// <author>neo.zhu</author>
// <date><#= DateTime.Now.ToString("G") #> </date>
// <summary>
// 配合 easyui datagrid filter 组件使用,实现对datagrid 所有字段筛选功能
// 也可以对特定的业务逻辑查询进行封装
//  
//  
// </summary>

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Entity.SqlServer;
using Repository.Pattern.Repositories;
using Repository.Pattern.Ef6;
using System.Web.WebPages;
using <#= ModelNamespace #>;
 

namespace <#=DefaultNamespace #>.Repositories
{
   public class <#= ModelName #>Query:QueryObject<<#= ModelName #>>
    {
        public <#= ModelName #>Query WithAnySearch(string search)
        {
            if (!string.IsNullOrEmpty(search))
                And(<#= QueryLambdaText #>);
            return this;
        }


		public <#= ModelName #>Query Withfilter(IEnumerable<filterRule> filters)
        {
           if (filters != null)
           {
               foreach (var rule in filters)
               {
                  <#
					IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
				    foreach (PropertyMetadata property in properties) {
						 if ( !property.IsAssociation) {
				  #>

					<# 
						if(property.ShortTypeName=="string") {
					#>
						if (rule.field == "<#= property.PropertyName  #>"  && !string.IsNullOrEmpty(rule.value))
						{
							And(x => x.<#= property.PropertyName #>.Contains(rule.value));
						}
				    <# 
					   // end if
						} 
					#>

				    <# 
						if(property.ShortTypeName=="int"  ) {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsInt())
						{
							int val = Convert.ToInt32(rule.value);
							switch (rule.op) {
                            case "equal":
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                            case "notequal":
                                And(x => x.<#= property.PropertyName  #> != val);
                                break;
                            case "less":
                                And(x => x.<#= property.PropertyName  #> < val);
                                break;
                            case "lessorequal":
                                And(x => x.<#= property.PropertyName  #> <= val);
                                break;
                            case "greater":
                                And(x => x.<#= property.PropertyName  #> > val);
                                break;
                            case "greaterorequal" :
                                And(x => x.<#= property.PropertyName  #> >= val);
                                break;
                            default:
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                        }
						}
				    <# 
					   // end if
						} #>

					<# 
						if(property.ShortTypeName=="float" || property.ShortTypeName=="decimal" || property.ShortTypeName=="double") {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsDecimal())
						{
							var val = Convert.ToDecimal(rule.value);
							switch (rule.op) {
                            case "equal":
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                            case "notequal":
                                And(x => x.<#= property.PropertyName  #> != val);
                                break;
                            case "less":
                                And(x => x.<#= property.PropertyName  #> < val);
                                break;
                            case "lessorequal":
                                And(x => x.<#= property.PropertyName  #> <= val);
                                break;
                            case "greater":
                                And(x => x.<#= property.PropertyName  #> > val);
                                break;
                            case "greaterorequal" :
                                And(x => x.<#= property.PropertyName  #> >= val);
                                break;
                            default:
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                        }
						}
				    <# 
					   // end if
						} #>

					<# 
						if(property.ShortTypeName=="DateTime" ) {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) )
						{	
							if (rule.op == "between")
                            {
                                var datearray = rule.value.Split(new char[] { '-' });
                                var start = Convert.ToDateTime(datearray[0]);
                                var end = Convert.ToDateTime(datearray[1]);
 
							    And(x => SqlFunctions.DateDiff("d", start, x.<#= property.PropertyName #>) >= 0);
                                And(x => SqlFunctions.DateDiff("d", end, x.<#= property.PropertyName #>) <= 0);
						    }
						}
				   <# 
					   } // end if
				   #>

				    <# 
						if(property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean") {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsBool())
						{	
							 var boolval=Convert.ToBoolean(rule.value);
							 And(x => x.<#= property.PropertyName #> == boolval);
						}
				   <# 
					   } // end if
				   #>
				<# 
					//end if end foreach  
						 }
                    }
				 #>
					
                   
               }
           }
            return this;
        }



        <#
        //PropertyMetadata primaryKey = ModelMetadata.PrimaryKeys.FirstOrDefault();
        foreach (PropertyMetadata property1 in ModelMetadata.Properties) { 
            var propertyname = property1.PropertyName.Replace("_","");
            var lowerpropertyname = property1.PropertyName.Replace("_","").ToLower();
            var typename= property1.ShortTypeName;
            if (property1.IsForeignKey) {
           
        #>
         public  <#= ModelName #>Query By<#= property1.PropertyName.Replace("_","") #>Withfilter(<#= typename #> <#= lowerpropertyname #>, IEnumerable<filterRule> filters)
         {
            And(x => x.<#= propertyname #> == <#= lowerpropertyname #>);
            
            if (filters != null)
           {
               foreach (var rule in filters)
               {
                     
                <#
					IEnumerable<PropertyMetadata> properties1 = ModelMetadata.Properties;
				    foreach (PropertyMetadata property in properties1) {
						 if (property.Scaffold && !property.IsAssociation) {
				  #>

					<# 
						if(property.ShortTypeName=="string") {
					#>
						if (rule.field == "<#= property.PropertyName  #>"  && !string.IsNullOrEmpty(rule.value))
						{
							And(x => x.<#= property.PropertyName #>.Contains(rule.value));
						}
				    <# 
					   // end if
						} 
					#>

				    <# 
						if(property.ShortTypeName=="int"  ) {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsInt())
						{
							int val = Convert.ToInt32(rule.value);
							switch (rule.op) {
                            case "equal":
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                            case "notequal":
                                And(x => x.<#= property.PropertyName  #> != val);
                                break;
                            case "less":
                                And(x => x.<#= property.PropertyName  #> < val);
                                break;
                            case "lessorequal":
                                And(x => x.<#= property.PropertyName  #> <= val);
                                break;
                            case "greater":
                                And(x => x.<#= property.PropertyName  #> > val);
                                break;
                            case "greaterorequal" :
                                And(x => x.<#= property.PropertyName  #> >= val);
                                break;
                            default:
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                        }
						}
				    <# 
					   // end if
						} #>

					<# 
						if(property.ShortTypeName=="float" || property.ShortTypeName=="decimal" || property.ShortTypeName=="double") {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsDecimal())
						{
							var val = Convert.ToDecimal(rule.value);
							switch (rule.op) {
                            case "equal":
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                            case "notequal":
                                And(x => x.<#= property.PropertyName  #> != val);
                                break;
                            case "less":
                                And(x => x.<#= property.PropertyName  #> < val);
                                break;
                            case "lessorequal":
                                And(x => x.<#= property.PropertyName  #> <= val);
                                break;
                            case "greater":
                                And(x => x.<#= property.PropertyName  #> > val);
                                break;
                            case "greaterorequal" :
                                And(x => x.<#= property.PropertyName  #> >= val);
                                break;
                            default:
                                And(x => x.<#= property.PropertyName  #> == val);
                                break;
                        }
						}
				    <# 
					   // end if
						} #>

					<# 
						if(property.ShortTypeName=="DateTime" ) {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) )
						{	
                            if (rule.op == "between")
                            {
                                var datearray = rule.value.Split(new char[] { '-' });
                                var start = Convert.ToDateTime(datearray[0]);
                                var end = Convert.ToDateTime(datearray[1]);
 
							    And(x => SqlFunctions.DateDiff("d", start, x.<#= property.PropertyName #>) >= 0);
                                And(x => SqlFunctions.DateDiff("d", end, x.<#= property.PropertyName #>) <= 0);
						    }
                        }
				   <# 
					   } // end if
				   #>

				    <# 
						if(property.ShortTypeName=="bool" || property.ShortTypeName=="Boolean") {
					#>
						if (rule.field == "<#= property.PropertyName  #>" && !string.IsNullOrEmpty(rule.value) && rule.value.IsBool())
						{	
							 var boolval=Convert.ToBoolean(rule.value);
							 And(x => x.<#= property.PropertyName #> == boolval);
						}
				   <# 
					   } // end if
				   #>
				<# 
					//end if end foreach  
						 }
                    }
				 #>

               }
            }
            return this;
         }
             
        <#
          }
        }
        #>
    }
}



